#!/usr/bin/env php
<?php
/**
 * This is the Fortissimo command line tool.
 *
 * To execute `fort` on a UNIX-like environment, you should be able to run it like this:
 * @code
 * $ fort --help
 * @endcode
 *
 * If PHP cannot be found on the path, you may need to run `fort` like this:
 * 
 * @code
 * $ php fort --help
 * @endcode
 */

// Options. 'value' indicates whether a value is required, 'help' is help text.
$opts = array(
  '--help' => array(
    'value' => FALSE,
    'help' => 'Print the help text',
  ),
  '--explain' => array(
    'value' => FALSE,
    'help' => 'Turn on explaining',
  ),
  '--config' => array(
    'value' => TRUE,
    'help' => 'Requires FILENAME.PHP: use config with given path/name'
  ),
  '--base' => array(
    'value' => TRUE,
    'help' => 'Requires DIRECTORY: Use the given directory as the root of Fortissimo. The app is run FROM this directory.'
  ),
  '--no-internals' => array(
    'value' => FALSE,
    'help' => 'Disallow execution of internal requests (aka at-requests)',
  ),
  '--list' => array(
    'value' => FALSE,
    'help' => 'List all requests and exit.',
  ),
  '--ini' => array(
    'value' => TRUE,
    'help' => 'Requires CONF.INI. The path to a Fort INI file.',
  ),
  '--alias' => array(
    'value' => TRUE,
    'help' => 'Requires ALIAS. The configuration alias to read from the INI file.'
  ),
  '--get' => array(
    'value' => TRUE,
    'help' => 'Requires NAME=VALUE[,NAME=VALUE[,NAME=VALUE]]. Pass a name/value pair in as GET arguments.'
  ),
);

$examples = array(
  "%s default" => 'Bootstrap the application in this directory and run the "default" request',
  "%s --config config/fort.php @create-bundle" => 'Bootstrap the application, use the fort.php instead of registry.php, and run the @create-bundle request.',
  "%s --ini my_fort.ini --alias MySite default" => 'Load settings from my_fort.ini, using the MySite section, and then execute the default request.',
);

// Print help.
if ($argc <= 1) {
  printf('%s expects at least one parameter. Try --help.'. PHP_EOL, $argv[0]);
  exit(1);
}

// Configure the autoloader.
fort_init();

$register = new \Fortissimo\Registry();
$register->logger('\Fortissimo\Logger\OutputInjectionLogger', 'foil');

// Register commands here.
fort_register($register);

$runner = new \Fortissimo\Runtime\CLIRunner($argv);
$runner->useRegistry($register);

try {
  $runner->run('default');
}
catch (\Exception $e) {
  fprintf(STDERR, "Fatal Error: %s\n", $e->getMessage());
  exit(1);
}

// SUPPORTING FUNCTIONS

function fort_init() {
  $composer_basedir = dirname(__DIR__);
  $candidates = array(
    '.',
    $composer_basedir,
  );

  foreach ($candidates as $path) {
    $file = $path . '/vendor/autoload.php';
    if (file_exists($file)) {
      require_once $file;
      return $path;
    }
  }
  throw new \Exception('Could not find an autoloader. Aborting.');
}

function fort_register($registry) {
  global $argv, $opts;
  $registry->route('default')
    ->does('\Fortissimo\Command\CLI\ParseOptions', 'globalOptions')
      ->using('options', $argv)
      ->using('optionSpec', $opts)
      ->using('help', 'Interact with Fortissimo from the command line.')
      ->using('usage', '%s [GLOBAL_OPTIONS] COMMAND [LOCAL_OPTIONS]')
    ->does('\Fortissimo\Command\Flow\Iterator', 'args')
      ->using('array')->from('cxt:globalOptions-extra')
    ->does('\Fortissimo\Command\Util\Head', 'target')
      ->using('list')->from('cxt:args')
    ->does('\Fortissimo\Command\Flow\Forward')
      ->using('route', 'help')->from('cxt:target')
      ;
  $registry->route('help', 'Display help text.')
    ->does('\Fortissimo\Command\CLI\ShowHelp')
    ;
  $registry->route('run', 'Run a Fortissimo route from a given application.')
    ->does('\Fortissimo\Command\Util\Head', 'cmd')
      ->using('list')->from('cxt:args')
    ->does('\Fortissimo\Command\Flow\Forward')
      ->using('route')->from('cxt:cmd')
    ->does('\Fortissimo\Command\EchoText')->using('text', 'Not Implemented.')
    ;
}
