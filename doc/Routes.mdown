# How To Use Routes and the Registry

This document provides an intro to writing request configurations. It also provides a few examples of using commands in practical situations.

## Bootstrapping an Application

To create a new application, you will need (at minimum) a file like
this. We'll name it `index.php`:

~~~
<?php
require_once 'vendor/autoloader.php';

use \Fortissimo\Runtime\WebRunner;
use \Fortissimo\Registry;

$register = new Registry('myApp');
$runner = new WebRunner();
$runner->useRegistry($register);

// Register routes here...
require 'routes.php';

$runner->run($_SERVER['REQUEST_URI']);
?>
~~~

The above creates a basic web runner that can handle web requests. It
includes `route.php`, which we will define below. That file will
register all of the routes (requests) that this server can handle.

## What Is A Route?

Routes in Fortissimo are a little different from routes in other
prominent frameworks. There is not necessarily a one-to-on mapping
between a route and a URI. But for the most part, the idea is the same:
a route maps a request to a chain of commands to be run.

In the next few sections, we will see how a route can be declared.

## A Basic Introduction to Requests and Chains of Commands

Let's begin by adding a "Hello World" route to our `routes.php` file:

~~~
<?php
global $register;

$register->route('hello', 'Prints Hello World.')
  ->does('\Fortissimo\Command\EchoText')
    ->using('text', 'Hello World!')
;
~~~

Assuming our `index.php` is at `http://example.com/index.php`, we could
now point our browser to `http://example.com/index.php?ff=hello` and it
would return "Hello World!".

How does this work? In a nutshell...

- We declare a route named `hello`. Fortissimo will (by default -- this
  is highly configurable) look for the GET parameter `ff` to find out
  what rute to run.
- Each route can have as many `does()` statements as it needs. A
  `does()` takes a full class name, so `\Fortissimo\Command\EchoText`
  refers to a real command class that comes with Fortissimo. Commands
  are easy to write, but Fortissimo comes with some basics.
- Each command (supplied by `does()`) can have any number of parameters.
  You, the author of the route, use `using()` to map a parameter name to
  a value.
  * The `EchoText` command can take three parameters: `type`, `headers`,
    and `text`. We are only passing the `text` parameter.


Rarely do we want to run just one command per route. Here's an example that will
peform the `EchoText` command twice, with different parameters each time:

~~~
<?php
global $register;

$register->route('hello', 'Prints Hello World.')
  ->does('\Fortissimo\Command\EchoText')
    ->using('text', 'Hello ')
  ->does('\Fortissimo\Command\EchoText')
    ->using('text', 'World!')
;
~~~

This prints `Hello World`, printing them in two steps instead of one.

### Passing values to a parameter

Rarely do we want to hard code all of the values into our parameters.
Most of the time, we want our programs to be more flexible. Here's an
insanely insecure example where we allow a user to pass in the value for
the second `EchoText` call:

~~~
<?php
global $register;

$register->route('hello', 'Prints Hello World.')
  ->does('\Fortissimo\Command\EchoText')
    ->using('text', 'Hello ')
  ->does('\Fortissimo\Command\EchoText')
    ->using('text', 'World!')->from('get:msg')
;
~~~

The big change is that we added `from('get:msg')` at the end.

This tells Fortissimo that the `text` parameter should get its value
from `$_GET`, looking for the index `msg`.

To make use of this, we could enter the following URL in a browser:
`http://example.com/index.php?ff=hello&msg=Universe`.

Since `$_GET['msg']` is `Universe`, the above would display a page
saying "Hello Universe".

"Hold on a minute," you say, "Why is there still `World!` in the
`using()` call?" In this case, that value acts as a default. If no `msg`
is set in the URL, `World!` will be displayed for the second `EchoText`.


#### Sources for parameters

GET is not the only supported source for filling in parameter values.

Here's a short list of some of the supported sources:

- get: Retrieve a GET parameter
- post: Retrive POST data
- session: Get data from the session
- cookie: Get data from a browser cookie
- environment: Get data from the server's environment variables
- context: Get data from another command that has already been executed

  You can provide a prioritized list of sources into `from()`. So `from('get:a post:b session:c')`  
  will first check for `$_GET['a']`, then `$_POST['b']`, and finally `$_SESSION['c']`. It will use
  the first one it finds.

This last part is important. A huge advantage to a chain-of-commands approach is that we can have early commands to data crunching, and then configure later commands to use that data to accomplish something more sophisticated.

### The Context

So commands are run in order, and it's possible to get parameter values
from several different sources. All well and good. But how do commands
communicate with each other?

The answer is this: **The Context**.

As the route executes, it keeps a *context*, which contains information
about the configuration of the application, and its state as it is
running. Each command has access to the context.

So imagine we are building a simple weather reporting tool that can take
a ZIP (Postal) Code and get the current temperature. It might look something like
this:

~~~
<?php
global $register;

$register->route('weather', 'Prints the current temperature.')
  ->does('\Imaginary\LookupWeatherForZIP', 'temp')
    ->using('zip')->from('get:zip')
  ->does('\Fortissimo\Command\EchoText')
    ->using('text')->from('cxt:temp')
;
~~~

This route has two commands:

* `LookupWeatherForZIP` is a fictional command that takes a ZIP code
  (here supplied in `$_GET['zip']`) and returns a temperature.
* The second command, `EchoText` will echo that temperature to the
  browser.

But how does the second command get the data from the first?

Notice that our first `does()` command has a second argument.
Technically, this argument is the *name* of that command. Each command
in a chain must either not have a name or have a unique name.

Any time a command has a return value, that return value is stored in
the context, and it can be retrieved by name. In this case, since the
command's name is `temp`, the results of the command can be retrieved
from the context using that name.

The last line above shows how `EchoText` is getting the value of its
`text` parameter from `cxt:temp`. That is, it is retrieving the return
value of `LookupWeatherForZIP`.

This is how the context can be used to pass information from command to
command. Context values needn't be strings -- they can be any PHP type,
even objects or resources. This makes it possible to use a context for
what is called *dependency injection*, where the objects that a given
command depends on are initialized elsewhere, and then "injected" into
the command through the context.

## Loggers, Datasources, Request Mappers, and Caches

Routes are not the only thing that can be registered. Fortissimo
provides a way for developers to register these things as well:

* Loggers: A logger is responsible for providing a place for log
  messages to go. Fortissimo comes with loggers that can log to the
  screen, to an array (for later processing), and to the syslogger.
  Other packages provide database loggers and so on.
* Datasources: Resources that provide data, such as databases, key/value
  stores, and so on, can also be declared in the registry. This provides
  commands with a way to access a shared data source.
* Caches: Fortissimo makes it possible to declare shared cache
  resources, such as a Memcache server or an APC cache. These can then
  be utilized to speed up your application by caching data in a fast
  retrieval system.
* Request Mappers: Earlier, this article mentioned that routes do not
  necessarily map to URLs. A request mapper is a front controller
  responsible for taking input (URLs, HTTP headers, and so on) and
  determining which route should be run. Custom request mappers can
  allow you to map requests however you prefer, not according to some
  predefined URL scheme.


