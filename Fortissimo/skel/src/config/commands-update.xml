<?xml version="1.0"?>
<commands xmlns="http://technosophos.com/2009/1.1/commands.xml">
  
  <!-- 
  Fortissimo users the SPL autoloader to load classes, where the 
  assumption is that ClassName is stored in ClassName.php, ClassName.cmd.php,
  or ClassName.inc.
  
  To add additional directories to the class loader, specify them here.
  
  Example:
  <include path="test/Tests"/>  
  -->
  
  <!--
  Fortissimo provides a very thin database abstraction layer.
  
  To use it with MongoDB, simply customize the setup below. To use another
  database, implement FortissimoDatasource, and then use the implementing
  class in the invoke method here.
  
  You can use as many datasources as you want. Just give each one a different
  name.
  
  -->
  <datasource name="db" invoke="FortissimoMongoDatasource">
    <param name="server">mongodb://localhost:27017</param>
    <param name="defaultDB">%%PROJECT%%</param>
    
    <!-- Only one datasource should be set as the default. -->
    <param name="isDefault">true</param>
  </datasource>
  
  <!--
  A group is a grouping of commands that cannot be executed as a request.
  
  They can be referenced in requests, though.
  
  Example:
  <group name="bootstrap">
    <cmd name="database" invoke="SimpleDatabaseAccess">
      <param name="dsn">MyDSN</param>
      <param name="user">user</param>
      <param name="password">pass</param>
    </cmd>
  </group>
  -->
  
  <group name="bootstrap">
  </group>
     
     
  <!-- The default request will be executed when the index is loaded. -->
  <request name="default">
    
    <!-- Invoke all commands in the bootstrap group. -->
    <cmd group="bootstrap"/>
    
    <cmd name="initContext" invoke="FortissimoAddToContext">
      <!-- These become variables for the template. -->
      <param name="title">%%PROJECT%%</param>
      <param name="welcome">Fortissimo has been successfully installed.</param>
    </cmd>
    
    <cmd name="tpl" invoke="FortissimoTemplate">
      <param name="template">example.twig</param>
      <param name="templateDir">theme/vanilla</param>
      <param name="templateCache">./cache</param>
      <param name="disableCache">FALSE</param>
      
      <!--
      <param name="disableCache">TRUE</param>
      <param name="debug">FALSE</param>
      <param name="trimBlocks">FALSE</param>
      <param name="auto_reload">FALSE</param>
      -->
    </cmd>
    
    <cmd name="echo" invoke="FortissimoEcho">
      <param name="text" from="cxt:tpl"/>
    </cmd>
    
  </request>
  
  <!-- This is an example that would map to 
  http://example.com/this_app/item or http://example.com/this_app.php?ff=item
  
  <request name="item">
    <cmd name="echo" invoke="FortissimoEchoCommand">
      <param name="message">Test</param>
    </cmd>
    <cmd name="dump" invoke="FortissimoContextDump">
      <param name="item" from="cmd:echo"/>
    </cmd>
  </request>
  -->
  
  <!-- Logs directly into STDOUT (the browser, the console). -->
  <logger name="foil" invoke="FortissimoOutputInjectionLogger"/>
  
  <!-- Buffers log messages in an array to be retrieved later. 
  <logger name="fail" invoke="FortissimoArrayInjectionLogger"/>
  -->
  
  <!--
  Example of a more sophisticated (non-existent) logger:
  <logger name="syslog" invoke="FortissimoSyslogLogger">
    <param name="facility">local6</param>
  </logger>
  -->
  
  <!--
  Fortissimo supports global caches, though this is currently
  experimental.
  <cache name="dummy" invoke="FortissimoDummyRequestCache"/>
  <cache name="dummy2" invoke="FortissimoDummyRequestCache">
    <param name="param" value="foo"/>
  </cache>
  -->
</commands>